[ 변수 선언 ]
# let, var, const

[ 배열 선언 ]
# let | var | const = [ ]

# list_variable[0]
# list_variable.push()
# list_variable.length

[ 딕셔너리 선언 ]
# let | var | const = { }

# dict_variable['key']
# dict_variable.key
	# tmp = {'name':'yohan', 'age':17}
	# dict_variable.push(tmp)

[간편한 함수 ]
# 변수에 담긴 영어 전부 대문자로 바꾸기
# variable.toUpperCase()

# 특정 문자를 기준으로 문자열 나누기 (result는 배열)
# let result = variable.split('char')
# 골뱅이 기준으로 나눈 결과의 두번째 값을 .으로 나눈 결과의 첫번째 값을 result에 저장
# let result = variable.split('char')[1].split('.')[0]

# 배열의 사이사이를 특정 문자로 합치기
# let result = variable.join('.')

# 만약
# if( ) { } else { }

# 팝업창 출력
# alert('string')

# 반복문
# for(let i=0; i<100; i++){ }


[ 함수 선언 & 사용 ]
# 선언하기
# 1. function 함수_이름(변수들) { 명령들 }
# 2. let 함수_이름 = function(변수들) { 명령들 }
# 3. let 함수_이름 = (변수들) => { 명령들 }			축약형
# 사용하기
# 함수_이름(변수들)

[ 비구조 할당 ]
# 딕셔너리 키와 값을 빠르게 꺼내기 위함
# 키와 밸류의 자리에 함수를 넣을 수 있음

# 할당 간편하게 하기
# blog 딕셔너리에 공간이 두 개 있다면
# let owner = blog.owner
# let getPost = blog.getPost 를
# let { owner, getPost } = blog; 로 줄이기 가능

# blogConsole(blog) 처럼 변수만 넘겨도 알아서 밸류값만 받아냄 (키 값의 명칭은 인자와 같아야 할듯?)

[ 백틱 ]
# ` ` 이거
# 문자열처럼 쓰는 건 똑같지만 이스케이프 문자를 사용하지 않고 엔터를 쳐도 되는 듯 함(\n 대신 엔터)
# 백틱 안에 ${variable} 처럼 변수를 넣을 수 있음

[ 객체 리터럴 ]
# 딕셔너리를 짧게 만들기
# 변수들을 딕셔너리 안에 넣을 때 보통 key와 value를 모두 입력해야 한다.
# 하지만 key의 이름이 넣을 변수 이름과 같아도 된다면 key를 생략해도 된다!
# let name, job = 'A', 'B'
# let user = { name, job }