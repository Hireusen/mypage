show tables
	# 테이블 전부 보기


select * from orders
	# orders의 모든 필드 보기

select field1, field2, ... from orders
	# orders의 특정 필드 보기

select distinct(필드명) from 테이블명
	# 필드 안에 어떤 종류의 값들이 있는지 알고 싶을 때 중복되는 값은 전부 제거해주는 명령

select count(필드명) from 테이블명
	# 데이터 개수 세기

select calculation(필드명)
	# calculation에는 min(최소), max(최대), sum(합계), avg(평균) 등이 들어간다.


where 조건문
	# 조건에 부합하는 데이터 보기
	+ 조건문에는 비교 부호 사용 가능 ( <, >, <=, >=, =, != )
	+ 여러 조건일 경우 and, or 로 연결 가능
	+ 빈 값을 원할 경우 NULL을 입력

where 필드명 between '값1' and '값2'
	# 값1 이상, 값2 미만에 해당하는 데이터 보기 (날짜나 숫자 등)

where 필드명 in (값1, 값2 ...)
	# 특정 값과 일치하는 데이터 보기

where 필드명 like 값
	+ %는 짧을수도 길수도 있는 혹은 공백일수도 있는 무언가를 의미 (%naver.com 처럼, %A%이면 중간에 A가 섞인 문자, a%b이면 a로 시작하고 b로 끝나는 문자)
	+ _는 하나의 글자를 의미 (_길동 이면 성 상관없이 이름이 길동인 문자)


group by 필드명
	# 해당 필드명에서 중복되는 값을 제거한다. 단 중복되는 수는 따로 저장되어 count를 사용할 시 알 수 있는 듯하다.


order by 필드명 [정렬 설정]
	# 해당 필드명을 기준으로 정렬한다.
	+ 정렬 설정을 비우면 오름차순이 적용된다.
	+ 내림차순(desc) 오름차순(asc)


limit 숫자
	# 표시하는 데이터 한도 제한
	# 진짜 큰 데이터를 리미트 없이 조회하면 오래걸림

별칭
	# 테이블 명 뒤에 알파벳을 붙여서 별칭을 정할 수 있다.
	# 서로 다른 테이블에서 중복되는 필드명이 있을 경우 별칭.필드명으로 구분할 수 있다.
	# select * as orders o
	# where o.course_title = '문자열'

	# 필드명 as 별칭 으로 필드명에도 별칭을 정할 수 있다.
	# 필드명에 별칭이 있으면 표에서 원래 이름이 아니라 별칭이 표시된다.


join
	# 무언가를 기준으로 하여 두 테이블을 연결한다.
	# join 앞에 어떤 단어가 오는가에 따라 범위가 결정된다.
	
	# select * from [A] [a]
	# (?) join  [B] [b] on [a].[field] = [b].[field]
	
	# ? 에는 여러가지 단어가 올 수 있다.
	# inner join : [A] & [B]	필드 안의 데이터가 겹치면 통과 (평범하게 쓰는 듯)
	# left join : [A]				A는 다 가져오고, B에서는 A와 데이터가 겹치면 통과 (한쪽에는 있는데 한쪽에는 없는 데이터를 통계낼 때)
	# right join : [B]				B는 다 가져오고, A에서는 B와 데이터가 겹치면 통과 (한쪽에는 있는데 한쪽에는 없는 데이터를 통계낼 때)

union all
	# ( select 1 ) union all ( select 2 )
	# select 1과 select 2의 결과를 이어붙인다.
	# select 1, select 2 안에 있던 order by는 작동하지 않고 union all 바깥에서 order by를 사용해야 한다.

subquery
	# where 필드 in (...)은 필드의 값이 괄호 안의 값만 일치하는지 검사하는 구문이다.
	# 만약 괄호 안에 어떤 거대한 것을 넣는다면 어떨까? 그래도 된다.
	
	#	select * from users u
	#	where user_id in (
	#		select user_id from orders o
	#		where o.payment_method = 'kakaopay'
	#	)
	
	# inner join을 쓰지 않고 같은 결과를 낼 수 있는 구문을 구현했다.
	# 또한 함수의 형태를 띄기도 해서 최적화에 좀더 도움이 될 것이다.
	
	# 큰 쿼리문(select) 안에 들어가는 작은 쿼리문(select)의 형태를 하여 작은 쿼리문을 서브쿼리라 부른다.

	#	select pu.user_id, pu.point, q.avg_likes from point_users pu
	#	inner join (
	#		select c.user_id, round(avg(c.likes), 1) as 'avg_likes' from checkins c 
	#		group by user_id
	#	) q on pu.user_id = q.user_id
	#	order by q.avg_likes desc
	
	# 이런 식으로 쿼리문을 테이블처럼 사용할 수도 있다.
	
	# select * from (
	#
	# ) a inner join (
	#
	# ) b on a.id = b.id
	# 이것도 유용한 듯
	
with
	# with table_name as (
	#
	# ), table_name as ...
	
	# 서브쿼리를 진짜 함수처럼 바꿔버리는 기능이다.
	# with이 함수를 작성하는 것이고 쿼리문에서 table_name을 입력해서 호출하는 식이다.
	# 강의에서는 임시 테이블이라고 설명하였다.

select SUBSTRING_INDEX(필드명, 기준 문자, 1|-1) from 테이블명
	# 문자열 쪼개주는 기능이다. 1은 처음 꺼, -1은 마지막 꺼
	# 필드 안에 Temp@google.com이라는 이메일이 있다면
	# SUBSTRING_INDEX(필드명, @, 1)이면 Temp
	# SUBSTRING_INDEX(필드명, @, -1)이면 google.com을 반환한다.
	# 문자에 따옴표 잊지 말기

select SUBSTRING(필드명, a, b) from 테이블명
	# 일부 문자열만 표시해주는 기능이다.
	# a번째 문자부터 a+b번째 문자까지 보여준다.
	# 0이 아니라 1부터 시작이다.

case 컬럼명 when 조건식 then 결과 else 결과 end
	# if문이다. case ~ when ~ then ~ else ~ end 형태다.
	# 컬럼명은 생략이 가능하며 생략하지 않을 경우 '컬럼명은 조건식이다.' 식이 된다.
	# when ~ then ~ 은 반복할 수 있다
	# when then
	#
	#	select user_id, point, (
	#		case when point >= 10000 then '굳!'
	#		else '에...' end
	#	) as msg from point_users pu